name: Deploy to EKS  # Changed from K3s to EKS

on:
  push:
    branches: [ main ]

env:
  ECR_REGISTRY: ${{ secrets.AWS_ACCOUNT_ID }}.dkr.ecr.ap-northeast-2.amazonaws.com
  ECR_REPOSITORY: peerjs-server
  IMAGE_TAG: latest
  CLUSTER_NAME: peerjs-cluster  # Add your EKS cluster name
  AWS_REGION: ap-northeast-2

jobs:
  deploy:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v3

    # Modern AWS authentication
    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v2
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ env.AWS_REGION }}

    - name: Login to Amazon ECR
      id: login-ecr
      uses: aws-actions/amazon-ecr-login@v1

    - name: Build and push Docker image
      uses: docker/build-push-action@v4
      with:
        context: .
        push: true
        tags: ${{ env.ECR_REGISTRY }}/${{ env.ECR_REPOSITORY }}:${{ env.IMAGE_TAG }}
        cache-from: type=gha
        cache-to: type=gha,mode=max

    # Generate fresh kubeconfig instead of using static file
    - name: Configure Kubernetes Access
      run: |
        aws eks update-kubeconfig \
          --name ${{ env.CLUSTER_NAME }} \
          --region ${{ env.AWS_REGION }}
        kubectl get nodes  # Verify access

    - name: Deploy to EKS
      run: |
        # Update the image in deployment.yaml
        sed -i "s|image: .*|image: ${{ env.ECR_REGISTRY }}/${{ env.ECR_REPOSITORY }}:${{ env.IMAGE_TAG }}|g" deployment.yaml
        
        # Apply with validation skip (temporarily)
        kubectl apply -f deployment.yaml --validate=false
        kubectl rollout status deployment/my-app --timeout=90s

    # Verification step
    - name: Verify Deployment
      run: |
        kubectl get pods -o wide
        kubectl get svc